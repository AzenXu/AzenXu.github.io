<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on 细胞的作战实验室</title>
    <link>http://azen.me/code/micro/</link>
    <description>Recent content in 微服务 on 细胞的作战实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://azen.me/code/micro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2 微服务开发</title>
      <link>http://azen.me/code/micro/micro-server-iii/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/micro-server-iii/</guid>
      <description>&amp;nbsp;
0x0 微服务业务分析业务场景需求一：用户可以注册和登录
单点登录，但是需要支持跨域 - 使用其他系统的时候就不需要登录了不用session - 避免使用状态需求二：登录用户可对课程进行CURD操作
架构设计Tips：图的目的，是让我们的开发思路更清晰，开发效率更高的。所有想到的开发中应该注意到的点，都在图上标记出来就好，防止自己踩坑。不要为了作图而作图哟！
说明：</description>
    </item>
    
    <item>
      <title>3 服务编排前奏 - Docker容器化</title>
      <link>http://azen.me/code/micro/micro-server-iv/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/micro-server-iv/</guid>
      <description>&amp;nbsp;
服务Docker化
搭建Docker仓库，存image
搭建高可用的集群环境，优雅的调度程序

服务的Docker化把服务放在一个合适的运行环境里面
运行环境，又叫基础镜像
套路（Java为例）现在docker hub中寻找合适的镜像（搜Java）docker pull openjdk:7-jredocker run -it --entrypoint bash openjdk:7-jrerun个container起来把服务部署到镜像里（写DockerFile）经常变的东西不能写死到镜像里，否则一旦变更就需要重新构建这个镜像如数据库的访问地址，需要提出去而不是在配置文件里写死localhost应该写成变量的形式把要部署的服务打包成一个文件，xxx.</description>
    </item>
    
    <item>
      <title>4 服务编排 - Mesos</title>
      <link>http://azen.me/code/micro/micro-server-v/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/micro-server-v/</guid>
      <description>&amp;nbsp;
初见Program against your datacenter, like it&#39;s a single pool of resources.</description>
    </item>
    
    <item>
      <title>0 初识微服务</title>
      <link>http://azen.me/code/micro/micro-server-i/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/micro-server-i/</guid>
      <description>&amp;nbsp;
0x0 微服务导学微服务：就是普通的项目模块，运行在Docker里面，使用K8S管理Docker们
为什么要做微服务？
系统越来越复杂不同模块之间技术栈差异很大，管理复杂0x1 认识微服务软件架构的进化软件架构：在软件内部，经过综合各种因素的考量、权衡，选择特定的技术，将系统划分成不同的部分并使这些部分相互分工，彼此协作，为用户提供需要的价值。
考虑的因素业务需求（首位）已有技术栈成本组织架构（多少个小组，每个小组能做什么）可扩展性可维护性（系统的学习成本、新人上手成本、Bug修复成本）Java web的架构演进一层架构老系统：JSP - 页面、业务逻辑、数据库都放在一起MVC三层架构，纠结M到底是啥 - 其实很多概念就是用来迷惑我们的让我们纠结解决了代码调用杂乱无章的问题。通过在各层之间定义接口，让接口和维护分离，降低了维护成本dubbo背景：业务代码50w+行，产品需求不断，新人一个月上不了手，需要做拆分 - 一个大项拆成两个小项系统前端和后端服务可以从物理上管理开，变成两个可以单独维护的模块把一个单体架构变成了两个单体架构单体架构：</description>
    </item>
    
    <item>
      <title>1 微服务的着眼点及解决方案</title>
      <link>http://azen.me/code/micro/micro-service-ii/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/micro-service-ii/</guid>
      <description>&amp;nbsp;
0x0 微服务带来的问题服务之间的通讯问题？单体架构中需要通讯的情况少见，而微服务之间的相互调用非常频繁微服务如何发现彼此？单体架构使用Dubbo做服务发现：服务消费者需要对服务的提供者进行发现。发现的原理是通过KV存储有一个中间人，提供者把自己的信息告诉中间人，消费者去中间人那里拿提供者的地址微服务有各种语言，如何彼此发现？微服务怎样部署？更新？扩容？自动化流程？Jekins部署到预发环境，没问题部署到生产环境？微服务少的情况下可以这么做，但是一般很难这么做，因为需要同时上线的微服务器可能非常多，无法手动搞0x1 微服务间如何通讯通讯：socket、tcp/ip、http...
两个角度考虑通讯：
通讯模式通讯协议通讯模式角度通讯协议角度REST API特点：
请求方式描述动作类REST并不是适合于所有业务场景RPCMQ - 消息队列发布订阅的模式，可以使用MQ的方式实现</description>
    </item>
    
    <item>
      <title>3 网站上云</title>
      <link>http://azen.me/code/micro/golang-server-vii/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-vii/</guid>
      <description>&amp;nbsp;
0x0 CloudNative概述是什么：借助于大规模分布式系统在资源利用上的灵活使用、服务化拆分，演变出来的一种软件部署、架构、上线的流程方面的最佳实践
Cloud Native在云刚出来的时候就有了没有任何组织清晰定义云原生，而是一种习惯用法和最佳实践参考：百度百科
特点松耦合(SOA)每一个独立拆分的服务，具有独立完整的生命周期，不受别的服务影响和制约。
微服务领域，涉及其他知识点：服务注册微服务网关契约调用等以防止每一个服务调用之间出现不一致不统一的情况项目实现无状态(Stateless)RESTful中提到过，参考
伸缩性(scalability)伸缩性分为：纵向的伸缩(scale up)、横向的伸缩(scale out)</description>
    </item>
    
    <item>
      <title>2-x 复习 &amp;amp; 完善Comments功能模块</title>
      <link>http://azen.me/code/micro/golang-server-vi/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-vi/</guid>
      <description>&amp;nbsp;
这一节笔记，写于学习完课程 &amp;amp; 妈来北京玩了10天之后。
通过完善这个模块，可以快速回顾学到的服务端开发知识点。以后如果忘了，也可以循着这章再走一遍，就可以想起来了~
开始标签：https://github.com/AzenXu/Go-execise/tree/2018.8.21.comment.start
结束标签：https://github.com/AzenXu/Go-execise/tree/2018.8.21.comment.done

思路：
以前端为调试开始点。</description>
    </item>
    
    <item>
      <title>2-5 前端页面</title>
      <link>http://azen.me/code/micro/golang-server-v/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-v/</guid>
      <description>&amp;nbsp;
前端部分，展示了如何串联三个服务器方面的知识，所以还是很有必要好好看下的。所以写了这篇wiki。
想知道前端应该如何使用cookie和session把身份验证流程打通？
ajax如何和服务端进行交互？
前端 → 代理服务器 → 业务服务器 的完整链条是怎样的？</description>
    </item>
    
    <item>
      <title>2-4 前端服务</title>
      <link>http://azen.me/code/micro/golang-server-iv/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-iv/</guid>
      <description>&amp;nbsp;
概述前端服务（大前端）：
前台的HTML+CSS+JS后端的Go的WebServer小的网站：
直接一个webServer把结果返回给前端完事儿弊端：
没法解耦效率低能承载的业务量有限扩容非常复杂没办法进行分布式拆分和服务化解耦
前端服务 (不是前台)：
→ 前台（Front in 的 UI）</description>
    </item>
    
    <item>
      <title>2-3 Scheduler模块</title>
      <link>http://azen.me/code/micro/golang-server-iii/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-iii/</guid>
      <description>&amp;nbsp;
概念Scheduler:调度器
作用：处理延时型任务（不能马上给结果的）（异步任务、周期性任务、瞬时可能并不会有结果的任务）
原理：延时任务们分发到scheduler，scheduler根据timer的interval等属性，进行定时触发
说明：异步任务才需要Scheduler
为什么需要scheduler我们项目中有异步任务 - 延时删除视频
我们在删除数据的时候，一般先在source deletesource delete 用户看不到，但是其实是存在的。会把这个任务下发下去，在scheduler中过一周或一个月，才真正删除。那么这个schedler会每隔一个月运行一次。Scheduler Server包含什么ServerScheduler是一个独立的服务接收任务用的Timer定时触发任务的Task Runner (生产者/消费者模型下)描述timer每次触发的时候，下面的任务该怎么做很多中情况，任务分为两种：读取任务执行任务代码结构/scheduler</description>
    </item>
    
    <item>
      <title>2-2 Stream模块</title>
      <link>http://azen.me/code/micro/golang-server-ii/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-ii/</guid>
      <description>&amp;nbsp;
Stream Server两个关键知识点
Upload filesToken bucket - 限流特点静态视频，非RTMP
RTMP：用在直播上的，Client端不断有Input，别的Client端不断有Output。复杂度比较高
Streaming部分：</description>
    </item>
    
    <item>
      <title>2-1 流媒体 - API模块</title>
      <link>http://azen.me/code/micro/golang-server-i/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://azen.me/code/micro/golang-server-i/</guid>
      <description>&amp;nbsp;
0x0 基础概念API是什么后端对外形成Service的接口
REST是一种设计风格，不是任何架构标准RESTful API通常使用HTTP作为通信协议，JSON作数据格式RESTful API特点统一接口无状态无论什么时候调用，返回的都是我想要的东西API这个Service这个节点不具备状态可缓存分层（Layerd System）API的service可以分过好多层，每一层负责其中一部分功能CS模式REST设计原则以URL（统一资源定位符）风格设计API 资源路径类似本地文件系统风格通过不同的method区分对资源的CURDgetpostputdelete返回码（Status Code）需要符合HTTP资源描述的规定0x1 API模块设计 (RESTful风格)分析实体及关系三个实体用户资源用户上传的视频视频下面的评论用户和资源发生的互动实体间的关系资源属于用户评论属于资源</description>
    </item>
    
  </channel>
</rss>